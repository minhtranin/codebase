enum VideoStatus {
  INITIAL
  IN_PROGRESS
  ERROR
  OK
}

enum VideoType {
  FAUX
  HOSTED
  EMBED_CODE
  EXTERNAL_URL
}

enum Role { ADMIN, AFFILIATE, AGENT, DEVELOPER, PHOTOGRAPHER, PROCESSOR }

type User {
  id: Int! @id
  email: String! @unique
  firstName: String!
  joinDate: DateTime! @createdAt
  lastActive: DateTime! @updatedAt
  lastName: String!
  password: String!
  role: Role!
}

type DemoThing {
  id: Int! @id
  foo: String
  bar: Int!
}

 type TestDaniel {
  id: Int! @id
  name: String!
 }

 type TestTable {
  id: Int! @id
  name: String!
 }

type Video {
  id: Int! @id
  createdAt: DateTime! @createdAt
  order: Order @relation(name: "VideosByOrder") # TODO make order non null ("Order!")
  status: VideoStatus!
  title: String
  type: VideoType!
}

type DemoImages {
  id: Int! @id
  images: [File!]! @relation(name: "DownsizedImages")
  cropImages: [File!]! @relation(name: "CroppedImages")
}

# Below data types with possible issues (like no separate address type, string instead of relation etc.).
# TODO Move one by one above this comment when fixed.

# TODO make some types @embedded so they don't need id and separate table

enum AccountExtensionType {
  BASIC, PRO
}

enum ActivityStatus {
  ACTIVE, SUSPENDED
}

enum BillingFrequency {
  BIWEEKLY, DAILY, MONTHLY, WEEKLY
}

enum Country {
  AF, AX, AL, DZ, AS, AD, AO, AI, AQ, AG, AR, AM, AW, AU, AT, AZ, BS, BH, BD, BB, BY, BE, BZ, BJ, BM, BT, BO, BQ, BA, BW, BV, BR, IO, BN, BG, BF, BI, KH, CM, CA, CV, KY, CF, TD, CL, CN, CX, CC, CO, KM, CG, CD, CK, CR, CI, HR, CU, CW, CY, CZ, DK, DJ, DM, DO, EC, EG, SV, GQ, ER, EE, ET, FK, FO, FJ, FI, FR, GF, PF, TF, GA, GM, GE, DE, GH, GI, GR, GL, GD, GP, GU, GT, GG, GN, GW, GY, HT, HM, VA, HN, HK, HU, IS, IN, ID, IR, IQ, IE, IM, IL, IT, JM, JP, JE, JO, KZ, KE, KI, KP, KR, KW, KG, LA, LV, LB, LS, LR, LY, LI, LT, LU, MO, MK, MG, MW, MY, MV, ML, MT, MH, MQ, MR, MU, YT, MX, FM, MD, MC, MN, ME, MS, MA, MZ, MM, NA, NR, NP, NL, NC, NZ, NI, NE, NG, NU, NF, MP, NO, OM, PK, PW, PS, PA, PG, PY, PE, PH, PN, PL, PT, PR, QA, RE, RO, RU, RW, BL, SH, KN, LC, MF, PM, VC, WS, SM, ST, SA, SN, RS, SC, SL, SG, SX, SK, SI, SB, SO, ZA, GS, SS, ES, LK, SD, SR, SJ, SZ, SE, CH, SY, TW, TJ, TZ, TH, TL, TG, TK, TO, TT, TN, TR, TM, TC, TV, UG, UA, AE, GB, US, UM, UY, UZ, VU, VE, VN, VG, VI, WF, EH, YE, ZM, ZW
}

enum CreditCardName {
  AMERICANEXPRESS, MASTERCARD, VISA
}

enum FlyerLayoutName {
  FEATURED1, FEATURED1MINOR5, FEATURED2MINOR3, FEATURED2MINOR6, FEATURED2MINOR6WITHHORIZONTALBARS
}

enum PaymentProcessor {
  PAYPAL, STRIPE
}

enum State {
  AL, AK, AZ, AR, CA, CO, CT, DE, DC, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY
}

type Billing {
  id: Int! @id
  automaticPaymentProcessing: PaymentProcessing @relation(name: "AutomaticPaymentProcessing")
  creditCards: [CreditCard] @relation(name: "CreditCards")
  frequency: BillingFrequency
}

type CreditCard {
  id: Int! @id
}

type File {
  id: Int! @id
  filename: String!
  path: String!
}

type PaymentProcessing {
  id: Int! @id
  paymentProcessor: PaymentProcessor!
  publicKey: String!
  secretKey: String!
}

enum PhotoDownloadTriggers {
  NOTRIGGER, UPONACTIVATION
}

type PhotoPreset {
  id: Int! @id
  enabledPresets: [EnabledPhotoPreset!]! @relation(name: "EnabledPhotoPresets" onDelete: CASCADE)
  height: Int!
  name: String!
  owner: Affiliate! @relation(name: "PhotoPresetsCreatedByAffiliate")
  resolution: Int!
  width: Int!
}

type EnabledPhotoPreset {
  id: Int! @id
  enabled: Boolean!
  photoPreset: PhotoPreset! @relation(name: "EnabledPhotoPresets")
  downloadTrigger: PhotoDownloadTriggers! @default(value: NOTRIGGER)
}

enum PropertySiteMediaStyles {
  MODERN, SLIDESHOW, RESPONSIVE, VIDEO
}

type Region {
  label: String!
  id: Int! @id
}

type SocialMedia {
  id: Int! @id
}

type UsefulLinks {
  id: Int! @id
  propertySiteLink: String @default(value: "")
  loginLink: String @default(value: "")
  signupLink: String @default(value: "")
}

type WhiteLabel {
  id: Int! @id
  customDomain: String @default(value: "")
  enabled: Boolean @default(value: false)
}

type AffiliateSettings {
  id: Int! @id
  allowClientBillingAccess: Boolean @default(value: false)
  allowClientMediaUpload: Boolean @default(value: false)
  allowClientOrders: Boolean @default(value: false)
  orderConfirmationEmailRider: Boolean @default(value: false)
  sendWelcomeEmailsToNewClients: Boolean @default(value: false)
}

type AffiliateStatus {
  id: Int! @id
  activityStatus: ActivityStatus
  confirmed: Boolean
  type: AccountExtensionType
}

type Brokerage {
  id: Int! @id
  agents: [Agent!]! @relation(name: "AgentsAssignedToBrokerage")
  brokerSubsidy: Boolean @default(value: false)
  city: String!
  companyName: String!
  companyPay: Boolean @default(value: false)
  country: Country!
  defaultColorScheme: Color! @relation(name: "BrokerageDefaultColorScheme" onDelete: CASCADE)
  discount: String
  displayAgentCompanyLogoOnTopOfEachTour: Boolean @default(value: false)
  emailOffice: String
  flyerDisclaimer: String
  flyerLayout: FlyerLayoutName! @default(value: FEATURED1)
  hideAnimateNavigationBar: Boolean @default(value: false)
  hideFlyerFromPropertySiteTour: Boolean @default(value: false)
  offices: [Office!]! @relation(name: "OfficesAssignedToBrokerage" onDelete: CASCADE)
  owner: Affiliate! @relation(name: "BrokeragesCreatedByAffiliate")
  phone: String!
  photoDownloadPresets: [EnabledPhotoPreset!]! @relation(name: "EnabledPhotoPresetsCreatedByBrokerage" onDelete: CASCADE)
  propertySiteMediaStyle: PropertySiteMediaStyles! @default(value: MODERN)
  region: Region! @relation(name: "BrokeragesAssignedToRegion")
  removeExternalLinksFromUnbrandedTourFooter: Boolean @default(value: false)
  removePhotographerBrandingFromBrandedTour: Boolean @default(value: false)
  removePhotographerBrandingFromUnbrandedTour: Boolean @default(value: false)
  removePropertyAddressFromUnbrandedTours: Boolean @default(value: false)
  showPatternOverlayOnSlideShowAndVideoOverviewTour: Boolean @default(value: false)
  showViewAdditionalPropertiesButtonOnTours: Boolean @default(value: false)
  specialPricing: Boolean @default(value: false)
  state: State!
  status: ActivityStatus! @default(value: ACTIVE)
  street: String!
  website: String
  zip: String!
}

type Office {
  id: Int! @id
  brokerage: Brokerage! @relation(name: "OfficesAssignedToBrokerage")
  city: String!
  country: Country!
  email: String
  owner: Affiliate! @relation(name: "OfficesCreatedByAffiliate")
  photoDownloadPresets: [EnabledPhotoPreset!]! @relation(name: "EnabledPhotoPresetsCreatedByOffice" onDelete: CASCADE)
  phone: String
  region: Region! @relation(name: "OfficesAssignedToRegion")
  state: State!
  street: String!
  website: String
  zip: String!
}

type Order {
  id: Int! @id
  active: Boolean!
  address: String!
  cost: String!
  thumb: String
  date: String!
  sqfeet: Boolean!
  surface: Int!
  beds: Int!
  baths: Int!
  price: String!
  MLS: String!
  agent: String!
  agentEmail: String!
  agentPin: Boolean!
  broker: String!
  officeTel: String!
  mobileTel: String!
  images: Int!
  videos: [Video!]! @relation(name: "VideosByOrder" onDelete: CASCADE)
  web: String
  services: [OrderService!]! @relation(name: "OrderServices")
  status: OrderStatus!
}

enum OrderServiceStatus {
  Todo
  Completed
  Message
}

enum ServiceCategoryIcon {
  Aerial
  FloorPlan
  Landscape
  Panorama
  Photo
  Video
  Vr3D
}

type Color {
  id: Int! @id
  a: Int! @default(value: 1)
  b: Int!
  g: Int!
  r: Int!
}

type ServiceCategory {
  id: Int! @id
  color: Color!
  label: String!
  icon: ServiceCategoryIcon!
}

type OrderService {
  id: Int! @id
  name: String!
  category: ServiceCategory! @relation(name: "OrderServiceCategory")
  date: String
  photographer: Photographer @relation(name: "OrderServicesAssignedToPhotographer")
  time: String
  status: OrderServiceStatus!
}

enum OrderStatus {
  Active
  Inactive
  MediaOnly
  Overdue
  Pending
  Published
  Scheduled
  Sold
  Unassigned
  Unpublished
  Unscheduled
}

type PendingOrder {
  id: Int! @id
  address: String!
  date: String!
  services: [PendingService!]! @relation(name: "PendingOrderServices")
  agent: String!
  status: OrderStatus!
}

type PendingService {
  id: Int! @id
  date: String!
  photographer: Photographer! @relation(name: "PendingServicesAssignedToPhotographer")
  done: Boolean!
  service: String!
}

enum ServiceType {
  Primary
  AddOn
  Admin
  Package
}

enum SourceType {
  New
  Duplicate
}

type ServiceRegionAdjusted {
  id: Int! @id
  adjustedCompensation: Float
  adjustedPrice: Float
  custom: Boolean
  name: String!
}

enum DurationUnit {
  Hour
  Minute
}

type Service {
  id: Int! @id
  assignable: Boolean!
  category: ServiceCategory! @relation(name: "ServiceCategory")
  defaultCompensation: Float
  defaultPay: Int!
  duration: Int!
  durationUnit: DurationUnit!
  # image: File
  link: String
  mediaOnly: Boolean!
  name: String!
  note: String
  orderNotifyEmail: String
  packageServices: [Service!]! @relation(name: "PackageServices")
  photographer: Photographer! @relation(name: "ServiceAssignedToPhotographer")
  photographerPay: Int
  price: Float!
  processor: String!
  propertySite: Boolean!
  region: String!
  regions: [ServiceRegionAdjusted!]! @relation(name: "ServiceRegions")
  serviceImage: File @relation(name: "ServiceImage")
  serviceType: ServiceType!
  sourceType: SourceType!
  suspended: Boolean!
  tourNotifyEmail: String
}

type TourBanner {
  id: Int! @id
  color: Color! @relation(name: "TourBannerColor")
  label: String!
  blackText: Boolean! @default(value: false)
}

type Admin {
  id: Int! @id
  user: User! @relation(name: "AdminUser")
}

type Affiliate {
  id: Int! @id
  agents: [Agent!]! @relation(name: "AgentsAssignedToAffiliate")
  areasCovered: String
#  billing: Billing! @relation(name: "AffiliateBilling" onDelete: CASCADE) flattened version ?
  brokerages: [Brokerage!]! @relation(name:"BrokeragesCreatedByAffiliate" onDelete: CASCADE)
  city: String!
  companyName: String!
  country: Country!
#  coverPhoto: File @relation(name: "GalleryCoverPhoto")
#  defaultFauxVideoMusic: File @relation(name: "FauxVideoMusic")
  featuredPropertySites: [Order!]! @relation(name: "FeaturedPropertySites", onDelete: CASCADE)
  mediaExports: [PhotoPreset]! @relation(name: "PhotoPresetsCreatedByAffiliate" onDelete: CASCADE)
  defaultColorScheme: Color! @relation(name: "AffiliateDefaultColorScheme", onDelete: CASCADE)
  description: Json
  emailOffice: String
  orders: [Order!]! @relation(name: "OrdersCreatedByAffiliate")
  permissionsAndSettings: AffiliateSettings! @relation(name: "PermissionsAndSettings" onDelete: CASCADE)
  phone: String!
  phoneOffice: String
  processors: [Processor!]! @relation(name: "ProcessorsCreatedByAffiliate" onDelete: CASCADE)
  regions: [Region!]! @relation(name: "RegionsCreatedByAffiliate" onDelete: CASCADE)
#  socialMedia: SocialMedia! @relation(name: "AffiliateSocialMedia" onDelete: CASCADE) flattened version
  state: State!
  status: AffiliateStatus! @relation(name: "Status" onDelete: CASCADE)
  street: String!
  usefulLinks: UsefulLinks! @relation(name: "UsefulLinks" onDelete: CASCADE)
  user: User! @relation(name: "AffiliateUser" onDelete: CASCADE)
  tourColor: Color! @relation(name: "AffiliateTourColor", onDelete: CASCADE)
  website: String
  whiteLabel: WhiteLabel! @relation(name: "WhiteLabel" onDelete: CASCADE)
  zip: String!
}

type Agent {
  id: Int! @id
  affiliate: Affiliate @relation(name: "AgentsAssignedToAffiliate")
  agentMLSid: String
  bio: Json
  brokerage: Brokerage @relation(name: "AgentsAssignedToBrokerage")
  city: String
  companyPay: Boolean! @default(value: false)
  country: Country
  defaultColorScheme: Color! @relation(name: "AgentDefaultColorScheme" onDelete: CASCADE)
  designations: String
  displayAgentCompanyLogoOnTopOfEachTour: Boolean! @default(value: false)
  emailCC: String
  emailCCOnorderCompleted: Boolean! @default(value: false)
  emailCCOnorderPlaced: Boolean! @default(value: false)
  emailOffice: String
  flyerDisclaimer: String
  flyerLayout: FlyerLayoutName! @default(value: FEATURED1)
  hideAnimateNavigationBar: Boolean! @default(value: false)
  hideFlyerFromPropertySiteTour: Boolean! @default(value: false)
  internalNote: Json
  newTourOrder: Boolean! @default(value: false)
  officeAdmin: Boolean! @default(value: false)
  orders: [Order!]! @relation(name: "OrdersAssignedToAgent")
  others: String
  phone: String!
  phoneAlternate: String
  phoneMobile: String
  profilePicture: File @relation(name: "ProfilePricture")
  profileUrl: String
  region: Region @relation(name: "AgentsAssignedToRegion")
  removeExternalLinksFromUnbrandedTourFooter: Boolean! @default(value: false)
  removePhotographerBrandingFromBrandedTour: Boolean! @default(value: false)
  removePhotographerBrandingFromUnbrandedTour: Boolean! @default(value: false)
  removePropertyAddressFromUnbrandedTours: Boolean! @default(value: false)
  showPatternOverlayOnSlideShowAndVideoOverviewTour: Boolean! @default(value: false)
  showViewAdditionalPropertiesButtonOnTours: Boolean! @default(value: false)
  specialPricing: Boolean! @default(value: false)
  website: String
#  socialMedia: SocialMedia! @relation(name: "AgentSocialMedia" onDelete: CASCADE) flattened verion
  state: State
  status: ActivityStatus! @default(value: ACTIVE)
  street: String
  title: String
  tourActivated: Boolean! @default(value: false)
  user: User! @relation(name: "AgentUser" onDelete: CASCADE)
  zip: String
}

type Developer {
  id: Int! @id
  user: User! @relation(name: "DeveloperUser" onDelete: CASCADE)
}

type Photographer {
  id: Int! @id
  city: String
  country: Country
  activatable: Boolean! @default(value: true)
  phone: String!
  region: Region @relation(name: "PhotographersAssignedToRegion")
  schedulable: Boolean! @default(value: true)
  state: State
  street: String
  user: User! @relation(name: "PhotographerUser" onDelete: CASCADE)
  thumb: String
  website: String
  zip: String
}

type Processor {
  id: Int! @id
  activatable: Boolean! @default(value: false)
  affiliateId: Affiliate! @relation(name: "ProcessorsCreatedByAffiliate")
  city: String
  country: Country
  enableServiceDone: Boolean! @default(value: false)
  internalNote: Json
  phone: String
  regionId: Region! @relation(name: "ProcessorsAssignedToRegion")
  schedulable: Boolean! @default(value: false)
  state: String
  street: String
  user: User! @relation(name: "ProcessorUser" onDelete: CASCADE)
  website: String
  zip: String
}
